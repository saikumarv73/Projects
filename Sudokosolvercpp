class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        
        // To check whether the given board is correct or incorrect
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[0].size(); j++){
                if(board[i][j] != '.'){
                    if(isValid(board, i, j, board[i][j]) == false){
                        cout<<" Given input for the sudoku is incorrect ";
                        return;
                    }
                }
            }
        }
        
        // If given input is correct, it finds a solution if exist
        if(solve(board)){
            // Prints the solution 
            for(int i = 0; i < board.size(); i++){
                for(int j = 0; j < board[0].size(); j++){
                    cout<<board[i][j]<< " ";
                }
                cout<<endl;
            }
        }
        else{
            cout<<" There exist no solution for the given Sudoku. ";
            cout<<endl;
        }
    }
    
    bool solve(vector<vector<char>>& board){
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[0].size(); j++){
                if(board[i][j] == '.'){
                    for(char c = '1'; c <= '9'; c++){
                        if(isValid(board, i, j, c)){
                            board[i][j] = c; 
                            
                            if(solve(board))
                                return true; 
                            else
                                board[i][j] = '.'; 
                        }
                    }
                    
                    return false;
                }
            }
        }
        return true;
    }
    
    bool isValid(vector<vector<char>>& board, int row, int col, char c){
        for(int i = 0; i < 9; i++) {
            if(board[i][col] == c) 
                return false; 
            
            if(board[row][i] == c) 
                return false; 
            
            if(board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) 
                return false; 
        }
        return true;
    }
};
